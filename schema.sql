--
-- Create a table for public profiles
--
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  bio text,

  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


--
-- Create a table for zippclips
--
create table zippclips (
  id uuid not null primary key default uuid_generate_v4(),
  user_id uuid references public.profiles on delete cascade not null,
  created_at timestamp with time zone default now(),
  description text,
  video_url text,
  song text
);

-- Set up Row Level Security (RLS)
alter table zippclips
  enable row level security;

create policy "Zippclips are viewable by everyone." on zippclips
  for select using (true);

create policy "Users can insert their own zippclips." on zippclips
  for insert with check (auth.uid() = user_id);

create policy "Users can update their own zippclips." on zippclips
  for update using (auth.uid() = user_id);

create policy "Users can delete their own zippclips." on zippclips
  for delete using (auth.uid() = user_id);


--
-- Create a table for followers
--
create table followers (
  follower_id uuid references public.profiles on delete cascade not null,
  following_id uuid references public.profiles on delete cascade not null,
  created_at timestamp with time zone default now(),
  primary key (follower_id, following_id)
);

-- Set up Row Level Security (RLS)
alter table followers
  enable row level security;

create policy "Follower relationships are viewable by everyone." on followers
  for select using (true);

create policy "Users can follow other users." on followers
  for insert with check (auth.uid() = follower_id);

create policy "Users can unfollow other users." on followers
  for delete using (auth.uid() = follower_id);

--
-- Create a table for likes
--
create table likes (
  user_id uuid references public.profiles on delete cascade not null,
  zippclip_id uuid references public.zippclips on delete cascade not null,
  created_at timestamp with time zone default now(),
  primary key (user_id, zippclip_id)
);

-- Set up Row Level Security (RLS)
alter table likes
  enable row level security;

create policy "Likes are viewable by everyone." on likes
  for select using (true);

create policy "Users can like zippclips." on likes
  for insert with check (auth.uid() = user_id);

create policy "Users can unlike zippclips." on likes
  for delete using (auth.uid() = user_id);

--
-- Create a table for comments
--
create table comments (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  zippclip_id uuid references public.zippclips on delete cascade not null,
  comment_text text not null,
  created_at timestamp with time zone default now()
);

-- Set up Row Level Security (RLS)
alter table comments
  enable row level security;

create policy "Comments are viewable by everyone." on comments
  for select using (true);

create policy "Users can insert their own comments." on comments
  for insert with check (auth.uid() = user_id);

create policy "Users can update their own comments." on comments
  for update using (auth.uid() = user_id);

create policy "Users can delete their own comments." on comments
  for delete using (auth.uid() = user_id);
